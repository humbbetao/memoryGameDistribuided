package Servidor;import java.net.*;import java.io.*;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;/*TCPServer : Ã© o Servidor com seus dados para inciar o jogo, possui um hashmap e thread*/public class TCPServer {    public static void main(String args[]) {        LinkedList<Socket> clientList = new LinkedList<>();        ArrayList<ConnectionServer> conexoes = new ArrayList<>();        HashMap<Integer, ArrayList< Socket>> clientHash = new HashMap<>();        ArrayList<Socket> listaDeClientes = new ArrayList<>();        ServerSocket listenSocket;        try {            int serverPort = 9123; // porta do servidor            listenSocket = new ServerSocket(serverPort);            System.out.println("Servidor aguardando conexao ...");            ConnectionServer c = new ConnectionServer();            int number = 0;            Socket clientSocket = null;            while (true) {                if (clientSocket != null) {                    try {                        if (clientHash.get(number).size() == number) {                            ArrayList<Socket> listaDeJogadoresDaPartida = new ArrayList<>();                            listaDeJogadoresDaPartida = clientHash.get(number);                            System.out.println("numero de jogadores" + listaDeJogadoresDaPartida.size());                            System.out.println("numero de jogadores numero " + number);                            c.listaDeJogadoresDaPartida = listaDeJogadoresDaPartida;                            conexoes.add(c);                            c.initServer(number);//                            c.socket = listenSocket;                                                        System.out.println("Iniciou Jogo");                        }                    } catch (NullPointerException ex) {                        listaDeClientes = new ArrayList<>();                        listaDeClientes.add(clientSocket);                        clientHash.put(number, listaDeClientes);                    }                    //inicializa dados  e o servidor daquele dados                    if (clientHash.get(number).isEmpty()) {                        listaDeClientes = new ArrayList<>();                        listaDeClientes.add(clientSocket);                        clientHash.put(number, listaDeClientes);                    } else {                        clientHash.get(number).add(clientSocket);                    }                    //se estiver vazio ou com dados com numero de participantes e o socket do usuario                    if (clientHash.isEmpty()) {                        listenSocket.close();                    }                }                clientSocket = new Socket();                clientSocket = listenSocket.accept();                System.out.println("Aceitou Conexao");                clientList.add(clientSocket);                DataInputStream in = new DataInputStream(clientSocket.getInputStream());                number = Integer.valueOf(in.readUTF());            } //while        } catch (IOException e) {            System.out.println("Listen socket:" + e.getMessage());        } //catch    } //main} //class